{"version":3,"sources":["serviceWorker.js","Styles/themeConfig.js","Styles/header.style.js","utils.js","Components/Header.js","Constants/strings.js","Constants/apiConstants.js","Components/TrendsPicker.js","Styles/trends.style.js","Components/HomePage.js","Styles/HomePage.style.js","Actions/trends_actions.js","Constants/actionTypes.js","Actions/gifList_actions.js","Constants/numeric.js","routes.js","Reducers/gifList_reducer.js","Reducers/trendsList_reducer.js","Reducers/index.js","index.js"],"names":["Boolean","window","location","hostname","match","typography","fontFamily","join","palette","primary","main","header","backgroundColor","display","flexDirection","alignItems","title","fontSize","color","fontWeight","margin","transition","titleShrunk","useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","makeQueryString","params","Object","keys","map","key","encodeURIComponent","useStyles","makeStyles","styles","Header","classes","scrolled","useScrollTrigger","disableHysteresis","threshold","showShadow","AppBar","position","className","elevation","Typography","clsx","API_KEY","ENDPOINTS","search","trending","trends","theme","trendsContainer","background","overflowX","breakpoints","up","flexWrap","justifyContent","chip","marginLeft","marginBottom","selectedChip","border","TrendsPicker","props","useSelector","store","selectedTrend","setTrend","moveUp","style","top","list","trend","Chip","label","icon","onClick","clickable","root","width","minHeight","masonryContainer","masonry","columns","columnGap","brick","listImage","borderRadius","loader","invisible","opacity","HomePage","gifList","dispatch","useDispatch","pageNum","setPage","BottomBorderRef","useRef","scrollRef","scrollObserver","useCallback","node","IntersectionObserver","entries","forEach","en","intersectionRatio","p","observe","current","useInfiniteScroll","paramsWithKey","api_key","request","Axios","get","type","then","data","payload","getTrendsList","endpointKey","getGifList","limit","offset","q","imageData","Box","id","alt","src","images","fixed_width","url","height","CircularProgress","ref","loading","Routes","basename","process","exact","path","component","INITIAL_STATE","pagination","gifListReducer","state","action","trendsReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","combinedReducer","applyMiddleware","thunk","createMuiTheme","themeConfig","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2MAcoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCpBS,OACbC,WAAY,CACVC,WAAY,CACV,aACA,gBACA,qBACA,aACA,SACA,mBACA,QACA,aACA,sBACA,mBACA,qBACAC,KAAK,MAETC,QAAS,CACPC,QAAS,CAAEC,KAAM,a,oGCjBN,GACbC,OAAQ,CACNC,gBAAiB,OACjBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEdC,MAAO,CACLC,SAAU,GACVC,MAAO,OACPC,WAAY,OACZC,OAAQ,GACRC,WAAY,QAEdC,YAAa,CACXL,SAAU,KCbDM,EAAc,SAACC,EAAOC,GAAU,MAECC,mBAASF,GAFV,mBAEpCG,EAFoC,KAEpBC,EAFoB,KAqB3C,OAjBAC,qBACE,WAEE,IAAMC,EAAUC,YAAW,WACzBH,EAAkBJ,KACjBC,GAKH,OAAO,WACLO,aAAaF,MAGjB,CAACN,EAAOC,IAGHE,GAGIM,EAAkB,SAACC,GAAD,OAC7BC,OAAOC,KAAKF,GACTG,KACC,SAACC,GAAD,gBAAYC,mBAAmBD,GAA/B,YAAuCC,mBAAmBL,EAAOI,QAElE/B,KAAK,MCvBJiC,EAAYC,YAAWC,GAwBdC,EAtBA,WACb,IAAMC,EAAUJ,EAAUE,GACpBG,EAAWC,YAAiB,CAChCC,mBAAmB,EACnBC,UAAW,IAEPC,EAAa1B,EAAYsB,EAAU,KACzC,OACE,kBAACK,EAAA,EAAD,CACEC,SAAS,SACTC,UAAWR,EAAQjC,OACnB0C,UAAWJ,EAAa,EAAI,GAE5B,kBAACK,EAAA,EAAD,CACEF,UAAWG,YAAKX,EAAQ5B,MAAOiC,GAAcL,EAAQtB,cCxBpC,e,iBCAZkC,EAAU,mCAEVC,EAAY,CACvBC,OAAQ,eACRC,SAAU,iBACVC,OAAQ,sB,0CCIJpB,EAAYC,aCTH,SAACoB,GAAD,MAAY,CACzBC,gBAAgB,aACdzC,WAAY,OACZ0C,WAAY,OACZlD,QAAS,OACTC,cAAe,MACfkD,UAAW,UACVH,EAAMI,YAAYC,GAAG,MAAQ,CAC5BF,UAAW,QACXG,SAAU,OACVC,eAAgB,WAGpBC,KAAM,CACJxD,QAAS,OACTC,cAAe,MACfwD,WAAY,EACZnD,WAAY,MACZoD,aAAc,EACdtD,SAAU,IAEZuD,aAAc,CACZC,OAAQ,oBACRvD,MAAO,eDuBIwD,EApCM,SAACC,GACpB,IAAM/B,EAAUJ,IACVoB,EAASgB,aAAY,SAACC,GAAD,OAAWA,EAAMjB,UACpCkB,EAA4BH,EAA5BG,cAAeC,EAAaJ,EAAbI,SACjBlC,EAAWC,YAAiB,CAChCC,mBAAmB,EACnBC,UAAW,IAEPgC,EAASzD,EAAYsB,EAAU,KACrC,OACE,kBAACK,EAAA,EAAD,CACEE,UAAWR,EAAQkB,gBACnBT,UAAW,EACXF,SAAS,SACT8B,MAAO,CAAEC,IAAKF,EAAS,GAAK,KAE3B,CAAC,YAAD,mBAAgBpB,EAAOuB,OAAM9C,KAAI,SAAC+C,GAAD,OAChC,kBAACC,EAAA,EAAD,CACEC,MAAOF,EACPG,KAAgB,aAAVH,GAAwB,kBAAC,IAAD,MAC9B9C,IAAK8C,EACLI,QAAS,kBAAMT,EAAmB,aAAVK,EAAuB,KAAOA,IACtDK,WAAS,EACTrC,UAAWG,YACTX,EAAQyB,MACPS,IAAkBM,GACE,OAAlBN,GAAoC,aAAVM,IAC3BxC,EAAQ4B,cAEZtD,MAAM,iBEzBVsB,EAAYC,aCdH,iBAAO,CACpBiD,KAAM,CACJC,MAAO,QACPC,UAAW,qBACX/E,QAAS,OACTC,cAAe,SACfC,WAAY,UAEd8E,iBAAkB,CAChBF,MAAO,QACP9E,QAAS,OACTC,cAAe,MACfC,WAAY,UAEd+E,QAAS,CACPC,QAAS,UACTC,UAAW,GACXL,MAAO,MACPvE,OAAQ,UAEV6E,MAAO,CACL7E,OAAQ,QACRP,QAAS,eACT8E,MAAO,OACPtE,WAAY,wBAEd6E,UAAW,CACTP,MAAO,OACPQ,aAAc,GAEhBC,OAAQ,CACNhF,OAAQ,UAEViF,UAAW,CACTC,QAAS,ODkDEC,EApEE,WACf,IAAM3D,EAAUJ,IACVgE,EAAU5B,aAAY,SAACC,GAAD,OAAWA,EAAM2B,WACvCC,EAAWC,cAHI,EAIahF,mBAAS,MAJtB,mBAIdoD,EAJc,KAICC,EAJD,OAKMrD,qBALN,mBAKdiF,EALc,KAKLC,EALK,KAMfC,EAAkBC,iBAAO,MAsB/B,ONX+B,SAACC,EAAW/D,EAAW4D,GACtD,IAAMI,EAAiBC,uBACrB,SAACC,GACC,IAAIC,sBAAqB,SAACC,GACxBA,EAAQC,SAAQ,SAACC,GACXA,EAAGC,kBAAoBvE,GACzB4D,GAAQ,SAACY,GAAD,OAAOA,EAAI,WAGtBC,QAAQP,KAEb,CAACN,EAAS5D,IAEZnB,qBAAU,WACJkF,EAAUW,SACZV,EAAeD,EAAUW,WAE1B,CAACV,EAAgBD,IM3BpBY,CAAkBd,EAAiB,EAAGD,GAEtC/E,qBAAU,WACR4E,EElByB,WAC3B,IAAMmB,EAAgB,CACpBC,QAASrE,GAELsE,EAAUC,IAAMC,IAAN,ULXM,4BKWN,OACAvE,EAAUG,OADV,YACoB3B,EAAgB2F,KAEpD,OAAO,SAACnB,GACNA,EAAS,CAAEwB,KCZoB,wBDa/BH,EAAQI,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACd1B,EAAS,CAAEwB,KCbmB,uBDaSG,QAASD,QFQzCE,MACR,CAAC5B,IAEJ5E,qBAAU,WACR4E,GIL8B,SAACA,GAAD,OAChCA,EAAS,CAAEwB,KDvBiB,sBH4B1BrB,EAAQ,KACP,CAACH,EAAU3B,IAEdjD,qBAAU,WACR4E,EI1BsB,SAAC6B,EAAapG,GACtC,IAAM0F,EAAa,2BACd1F,GADc,IAEjB2F,QAASrE,IAELsE,EAAUC,IAAMC,IAAN,UPbM,4BOaN,OACAvE,EAAU6E,GADV,YAC0BrG,EAAgB2F,KAE1D,OAAO,SAACnB,GACNA,EAAS,CAAEwB,KDlBiB,qBCmB5BH,EAAQI,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACd1B,EAAS,CAAEwB,KDnBgB,oBCmBSG,QAASD,QJgB7CI,CAAWzD,EAAgB,SAAW,WAA5B,aACR0D,MKrCkB,GLsClBC,OKtCkB,GLsCV9B,GACJ7B,GAAiB,CAAE4D,EAAG5D,QAG7B,CAAC2B,EAAU3B,EAAe6B,IAG3B,yBAAKvD,UAAWR,EAAQ8C,MACtB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAcZ,cAAeA,EAAeC,SAAUA,IACtD,yBAAK3B,UAAWR,EAAQiD,kBACtB,yBAAKzC,UAAWR,EAAQkD,SACrBU,EAAQrB,KAAK9C,KAAI,SAACsG,GAAD,OAChB,kBAACC,EAAA,EAAD,CAAKxF,UAAWR,EAAQqD,MAAO3D,IAAKqG,EAAUE,IAC5C,kBAAC,MAAD,CACEC,IAAKH,EAAUE,GACfzF,UAAWR,EAAQsD,UACnB6C,IAAKJ,EAAUK,OAAOC,YAAYC,IAClC9C,OACE,yBACEnB,MAAO,CACLkE,OAAO,GAAD,OAAKR,EAAUK,OAAOC,YAAYE,OAAlC,MACNxD,MAAM,GAAD,OAAKgD,EAAUK,OAAOC,YAAYtD,MAAlC,MACL9E,QAAS,OACTC,cAAe,MACfC,WAAY,SACZqD,eAAgB,UAElBhB,UAAWR,EAAQsD,WAEnB,kBAACkD,EAAA,EAAD,eAQd,kBAACA,EAAA,EAAD,CACEC,IAAKxC,EACLzD,UAAWG,YAAKX,EAAQwD,QAASI,EAAQ8C,SAAW1G,EAAQyD,eMhErDkD,EAVA,WACb,OACE,kBAAC,IAAD,CAAQC,SAAUC,aAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrD,OCFnCsD,EAAgB,CACpBP,SAAS,EACTnE,KAAM,GACN2E,WAAY,IA0BCC,EAvBQ,WAAoC,IAAnCC,EAAkC,uDAA1BH,EAAeI,EAAW,uCAChD7B,EAAY6B,EAAZ7B,QACR,OAAQ6B,EAAOhC,MACb,IJf4B,mBIgB1B,OAAO,2BACF+B,GADL,IAEEV,SAAS,IAEb,IJnB6B,oBIoB3B,MAAO,CACLA,SAAS,EACTnE,KAAK,GAAD,mBAAM6E,EAAM7E,MAAZ,YAAqBiD,EAAQD,OACjC2B,WAAY1B,EAAQ0B,YAExB,IJvB0B,iBIwBxB,OAAO,eACFD,GAEP,QACE,OAAOG,IC1BPH,EAAgB,CACpBP,SAAS,EACTnE,KAAM,IAqBO+E,EAlBO,WAAoC,IAAnCF,EAAkC,uDAA1BH,EAAeI,EAAW,uCAC/C7B,EAAY6B,EAAZ7B,QACR,OAAQ6B,EAAOhC,MACb,ILT+B,sBKU7B,MAAO,CACLqB,SAAS,EACTnE,KAAM,IAEV,ILbgC,uBKc9B,MAAO,CACLmE,SAAS,EACTnE,KAAMiD,EAAQD,MAElB,QACE,OAAO6B,ICpBEG,cAAgB,CAC7B3D,QAASuD,EACTnG,OAAQsG,ICMJE,EAAmBnK,OAAOoK,sCAAwCC,IAClEzF,EAAQ0F,YACZC,EACAJ,EAAiBK,YAAgBC,OAE7B7G,EAAQ8G,YAAeC,GAE7BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUlG,MAAOA,GACf,kBAACmG,EAAA,EAAD,CAAenH,MAAOA,GACpB,kBAAC,EAAD,SAINoH,SAASC,eAAe,SnB0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAACoD,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3570bd6b.chunk.js","sourcesContent":["/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\n  typography: {\n    fontFamily: [\n      \"Zilla Slab\",\n      \"-apple-system\",\n      \"BlinkMacSystemFont\",\n      '\"Segoe UI\"',\n      \"Roboto\",\n      '\"Helvetica Neue\"',\n      \"Arial\",\n      \"sans-serif\",\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(\",\"),\n  },\n  palette: {\n    primary: { main: \"#95C9FF\" },\n  },\n};\n","export default {\n  header: {\n    backgroundColor: \"#fff\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  title: {\n    fontSize: 48,\n    color: \"#000\",\n    fontWeight: \"bold\",\n    margin: 12,\n    transition: \"0.2s\",\n  },\n  titleShrunk: {\n    fontSize: 32,\n  },\n};\n","import { useState, useEffect, useCallback } from \"react\";\n\nexport const useDebounce = (value, delay) => {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n\n  return debouncedValue;\n};\n\nexport const makeQueryString = (params) =>\n  Object.keys(params)\n    .map(\n      (key) => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`\n    )\n    .join(\"&\");\n\nexport const useInfiniteScroll = (scrollRef, threshold, setPage) => {\n  const scrollObserver = useCallback(\n    (node) => {\n      new IntersectionObserver((entries) => {\n        entries.forEach((en) => {\n          if (en.intersectionRatio > threshold) {\n            setPage((p) => p + 1);\n          }\n        });\n      }).observe(node);\n    },\n    [setPage, threshold]\n  );\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollObserver(scrollRef.current);\n    }\n  }, [scrollObserver, scrollRef]);\n};\n","import React from \"react\";\nimport { AppBar, Typography, useScrollTrigger } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport styles from \"../Styles/header.style\";\nimport { SUPER_GIF } from \"../Constants/strings\";\nimport { useDebounce } from \"../utils\";\n\nconst useStyles = makeStyles(styles);\n\nconst Header = () => {\n  const classes = useStyles(styles);\n  const scrolled = useScrollTrigger({\n    disableHysteresis: true,\n    threshold: 0,\n  });\n  const showShadow = useDebounce(scrolled, 125);\n  return (\n    <AppBar\n      position=\"sticky\"\n      className={classes.header}\n      elevation={showShadow ? 6 : 0}\n    >\n      <Typography\n        className={clsx(classes.title, showShadow && classes.titleShrunk)}\n      >\n        {SUPER_GIF}\n      </Typography>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","export const SUPER_GIF = \"Super GIF\";\nexport const a = \"\";\n","export const API_KEY = \"EBwOiGqfDkDOzuwUQGL0sjsV2lP0rjI7\";\nexport const BASE_URL = \"https://api.giphy.com/v1\";\nexport const ENDPOINTS = {\n  search: \"/gifs/search\",\n  trending: \"/gifs/trending\",\n  trends: \"/trending/searches\",\n};\n","import React from \"react\";\nimport { AppBar, useScrollTrigger, Chip } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TrendingUpIcon from \"@material-ui/icons/TrendingUp\";\nimport clsx from \"clsx\";\nimport { useDebounce } from \"../utils\";\nimport styles from \"../Styles/trends.style\";\n\nconst useStyles = makeStyles(styles);\nconst TrendsPicker = (props) => {\n  const classes = useStyles();\n  const trends = useSelector((store) => store.trends);\n  const { selectedTrend, setTrend } = props;\n  const scrolled = useScrollTrigger({\n    disableHysteresis: true,\n    threshold: 0,\n  });\n  const moveUp = useDebounce(scrolled, 125);\n  return (\n    <AppBar\n      className={classes.trendsContainer}\n      elevation={0}\n      position=\"sticky\"\n      style={{ top: moveUp ? 71 : 96 }}\n    >\n      {[\"Trending\", ...trends.list].map((trend) => (\n        <Chip\n          label={trend}\n          icon={trend === \"Trending\" && <TrendingUpIcon />}\n          key={trend}\n          onClick={() => setTrend(trend === \"Trending\" ? null : trend)}\n          clickable\n          className={clsx(\n            classes.chip,\n            (selectedTrend === trend ||\n              (selectedTrend === null && trend === \"Trending\")) &&\n              classes.selectedChip\n          )}\n          color=\"primary\"\n        />\n      ))}\n    </AppBar>\n  );\n};\n\nexport default TrendsPicker;\n","export default (theme) => ({\n  trendsContainer: {\n    transition: \"0.2s\",\n    background: \"#fff\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    overflowX: \"scroll\",\n    [theme.breakpoints.up(\"sm\")]: {\n      overflowX: \"unset\",\n      flexWrap: \"wrap\",\n      justifyContent: \"center\",\n    },\n  },\n  chip: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    marginLeft: 8,\n    fontWeight: \"800\",\n    marginBottom: 8,\n    fontSize: 16,\n  },\n  selectedChip: {\n    border: \"2px solid #1F4788\",\n    color: \"#1F4788\",\n  },\n});\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { CircularProgress, Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Img } from \"react-image\";\nimport clsx from \"clsx\";\nimport Header from \"./Header\";\nimport { useInfiniteScroll } from \"../utils\";\nimport { getGifList, clearGifList } from \"../Actions/gifList_actions\";\nimport { getTrendsList } from \"../Actions/trends_actions\";\nimport { LIST_LIMIT } from \"../Constants/numeric\";\nimport styles from \"../Styles/HomePage.style\";\nimport TrendsPicker from \"./TrendsPicker\";\n\nconst useStyles = makeStyles(styles);\n\nconst HomePage = () => {\n  const classes = useStyles();\n  const gifList = useSelector((store) => store.gifList);\n  const dispatch = useDispatch();\n  const [selectedTrend, setTrend] = useState(null);\n  const [pageNum, setPage] = useState();\n  const BottomBorderRef = useRef(null);\n  useInfiniteScroll(BottomBorderRef, 0, setPage);\n\n  useEffect(() => {\n    dispatch(getTrendsList());\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(clearGifList());\n    setPage(0);\n  }, [dispatch, selectedTrend]);\n\n  useEffect(() => {\n    dispatch(\n      getGifList(selectedTrend ? \"search\" : \"trending\", {\n        limit: LIST_LIMIT,\n        offset: pageNum * LIST_LIMIT,\n        ...(selectedTrend && { q: selectedTrend }),\n      })\n    );\n  }, [dispatch, selectedTrend, pageNum]);\n\n  return (\n    <div className={classes.root}>\n      <Header />\n      <TrendsPicker selectedTrend={selectedTrend} setTrend={setTrend} />\n      <div className={classes.masonryContainer}>\n        <div className={classes.masonry}>\n          {gifList.list.map((imageData) => (\n            <Box className={classes.brick} key={imageData.id}>\n              <Img\n                alt={imageData.id}\n                className={classes.listImage}\n                src={imageData.images.fixed_width.url}\n                loader={\n                  <div\n                    style={{\n                      height: `${imageData.images.fixed_width.height}px`,\n                      width: `${imageData.images.fixed_width.width}px`,\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                      alignItems: \"center\",\n                      justifyContent: \"center\",\n                    }}\n                    className={classes.listImage}\n                  >\n                    <CircularProgress />\n                  </div>\n                }\n              />\n            </Box>\n          ))}\n        </div>\n      </div>\n      <CircularProgress\n        ref={BottomBorderRef}\n        className={clsx(classes.loader, !gifList.loading && classes.invisible)}\n      />\n    </div>\n  );\n};\n\nexport default HomePage;\n","export default () => ({\n  root: {\n    width: \"100vw\",\n    minHeight: \"calc(100vh - 96px)\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  masonryContainer: {\n    width: \"100vw\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  masonry: {\n    columns: \"5 150px\",\n    columnGap: 12,\n    width: \"90%\",\n    margin: \"0 auto\",\n  },\n  brick: {\n    margin: \"6px 0\",\n    display: \"inline-block\",\n    width: \"100%\",\n    transition: \"all .25s ease-in-out\",\n  },\n  listImage: {\n    width: \"100%\",\n    borderRadius: 3,\n  },\n  loader: {\n    margin: \"0 auto\",\n  },\n  invisible: {\n    opacity: 1,\n  },\n});\n","import Axios from \"axios\";\nimport { BASE_URL, API_KEY, ENDPOINTS } from \"../Constants/apiConstants\";\nimport { makeQueryString } from \"../utils\";\nimport {\n  TRENDS_LIST_LOADING,\n  TRENDS_LIST_RESPONSE,\n} from \"../Constants/actionTypes\";\n\nexport const getTrendsList = () => {\n  const paramsWithKey = {\n    api_key: API_KEY,\n  };\n  const request = Axios.get(\n    `${BASE_URL}${ENDPOINTS.trends}?${makeQueryString(paramsWithKey)}`\n  );\n  return (dispatch) => {\n    dispatch({ type: TRENDS_LIST_LOADING });\n    request.then(({ data }) => {\n      dispatch({ type: TRENDS_LIST_RESPONSE, payload: data });\n    });\n  };\n};\n\nexport const a = \"\";\n","export const GIF_LIST_LOADING = \"GIF_LIST_LOADING\";\nexport const GIF_LIST_RESPONSE = \"GIF_LIST_RESPONSE\";\nexport const GIF_LIST_FAILURE = \"GIF_LIST_FAILURE\";\nexport const CLEAR_GIF_LIST = \"CLEAR_GIF_LIST\";\nexport const TRENDS_LIST_LOADING = \"TRENDS_LIST_LOADING\";\nexport const TRENDS_LIST_RESPONSE = \"TRENDS_LIST_RESPONSE\";\nexport const TRENDS_LIST_FAILURE = \"TRENDS_LIST_FAILURE\";\n","import Axios from \"axios\";\nimport { BASE_URL, API_KEY, ENDPOINTS } from \"../Constants/apiConstants\";\nimport { makeQueryString } from \"../utils\";\nimport {\n  GIF_LIST_LOADING,\n  GIF_LIST_RESPONSE,\n  CLEAR_GIF_LIST,\n} from \"../Constants/actionTypes\";\n\nexport const getGifList = (endpointKey, params) => {\n  const paramsWithKey = {\n    ...params,\n    api_key: API_KEY,\n  };\n  const request = Axios.get(\n    `${BASE_URL}${ENDPOINTS[endpointKey]}?${makeQueryString(paramsWithKey)}`\n  );\n  return (dispatch) => {\n    dispatch({ type: GIF_LIST_LOADING });\n    request.then(({ data }) => {\n      dispatch({ type: GIF_LIST_RESPONSE, payload: data });\n    });\n  };\n};\n\nexport const clearGifList = () => (dispatch) =>\n  dispatch({ type: CLEAR_GIF_LIST });\n","export const LIST_LIMIT = 10;\nexport const a = \"\";\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport HomePage from \"./Components/HomePage\";\n\nconst Routes = () => {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Routes;\n","import {\n  GIF_LIST_LOADING,\n  GIF_LIST_RESPONSE,\n  CLEAR_GIF_LIST,\n} from \"../Constants/actionTypes\";\n\nconst INITIAL_STATE = {\n  loading: false,\n  list: [],\n  pagination: {},\n};\n\nconst gifListReducer = (state = INITIAL_STATE, action) => {\n  const { payload } = action;\n  switch (action.type) {\n    case GIF_LIST_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case GIF_LIST_RESPONSE:\n      return {\n        loading: false,\n        list: [...state.list, ...payload.data],\n        pagination: payload.pagination,\n      };\n    case CLEAR_GIF_LIST:\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default gifListReducer;\n","import {\n  TRENDS_LIST_LOADING,\n  TRENDS_LIST_RESPONSE,\n} from \"../Constants/actionTypes\";\n\nconst INITIAL_STATE = {\n  loading: false,\n  list: [],\n};\n\nconst trendsReducer = (state = INITIAL_STATE, action) => {\n  const { payload } = action;\n  switch (action.type) {\n    case TRENDS_LIST_LOADING:\n      return {\n        loading: true,\n        list: [],\n      };\n    case TRENDS_LIST_RESPONSE:\n      return {\n        loading: false,\n        list: payload.data,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default trendsReducer;\n","import { combineReducers } from \"redux\";\nimport gifListReducer from \"./gifList_reducer\";\nimport trendsReducer from \"./trendsList_reducer\";\n\nexport default combineReducers({\n  gifList: gifListReducer,\n  trends: trendsReducer,\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./Styles/index.css\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport themeConfig from \"./Styles/themeConfig\";\nimport Routes from \"./routes\";\nimport combinedReducer from \"./Reducers\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  combinedReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\nconst theme = createMuiTheme(themeConfig);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <Routes />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}