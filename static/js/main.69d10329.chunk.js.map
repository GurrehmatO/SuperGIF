{"version":3,"sources":["serviceWorker.js","Styles/themeConfig.js","Styles/header.style.js","Components/Header.js","utils.js","Constants/strings.js","Constants/apiConstants.js","Actions/gifList_actions.js","Constants/actionTypes.js","Components/HomePage.js","Styles/HomePage.style.js","Constants/numeric.js","Reducers/gifList_reducer.js","Reducers/index.js","index.js"],"names":["Boolean","window","location","hostname","match","typography","fontFamily","join","header","backgroundColor","display","flexDirection","alignItems","title","fontSize","color","fontWeight","margin","transition","titleShrunk","useStyles","makeStyles","styles","Header","classes","showShadow","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","useScrollTrigger","threshold","AppBar","position","className","elevation","Typography","clsx","ENDPOINTS","search","trending","getGifList","endpointKey","params","paramsWithKey","api_key","request","Axios","get","Object","keys","map","key","encodeURIComponent","makeQueryString","dispatch","type","then","data","payload","border","height","width","HomePage","gifList","useSelector","store","useDispatch","pageNum","setPage","BottomBorderRef","useRef","scrollRef","scrollObserver","useCallback","node","IntersectionObserver","entries","forEach","en","intersectionRatio","p","observe","current","useInfiniteScroll","limit","offset","imageList","useMemo","list","imageData","images","fixed_height","src","url","parseInt","photos","loading","CircularProgress","ref","INITIAL_STATE","pagination","gifListReducer","state","action","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","combinedReducer","applyMiddleware","thunk","theme","createMuiTheme","themeConfig","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.69d10329.chunk.js","sourcesContent":["/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\n  typography: {\n    fontFamily: [\n      \"Zilla Slab\",\n      \"-apple-system\",\n      \"BlinkMacSystemFont\",\n      '\"Segoe UI\"',\n      \"Roboto\",\n      '\"Helvetica Neue\"',\n      \"Arial\",\n      \"sans-serif\",\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(\",\"),\n  },\n};\n","export default {\n  header: {\n    backgroundColor: \"#fff\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  title: {\n    fontSize: 48,\n    color: \"#000\",\n    fontWeight: \"bold\",\n    margin: 12,\n    transition: \"0.2s\",\n  },\n  titleShrunk: {\n    fontSize: 32,\n  },\n};\n","import React from \"react\";\nimport { AppBar, Typography, useScrollTrigger } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport styles from \"../Styles/header.style\";\nimport { SUPER_GIF } from \"../Constants/strings\";\nimport { useDebounce } from \"../utils\";\n\nconst useStyles = makeStyles(styles);\n\nconst Header = () => {\n  const classes = useStyles(styles);\n  const scrolled = useScrollTrigger({\n    threshold: 0,\n  });\n  const showShadow = useDebounce(scrolled, 250);\n  return (\n    <AppBar\n      position=\"sticky\"\n      className={classes.header}\n      elevation={showShadow ? 6 : 0}\n    >\n      <Typography\n        className={clsx(classes.title, showShadow && classes.titleShrunk)}\n      >\n        {SUPER_GIF}\n      </Typography>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import { useState, useEffect, useCallback } from \"react\";\n\nexport const useDebounce = (value, delay) => {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n\n  return debouncedValue;\n};\n\nexport const makeQueryString = (params) =>\n  Object.keys(params)\n    .map(\n      (key) => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`\n    )\n    .join(\"&\");\n\nexport const useInfiniteScroll = (scrollRef, threshold, setPage) => {\n  const scrollObserver = useCallback(\n    (node) => {\n      new IntersectionObserver((entries) => {\n        entries.forEach((en) => {\n          if (en.intersectionRatio > threshold) {\n            setPage((p) => p + 1);\n          }\n        });\n      }).observe(node);\n    },\n    [setPage, threshold]\n  );\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollObserver(scrollRef.current);\n    }\n  }, [scrollObserver, scrollRef]);\n};\n","export const SUPER_GIF = \"Super GIF\";\nexport const a = \"\";\n","export const API_KEY = \"EBwOiGqfDkDOzuwUQGL0sjsV2lP0rjI7\";\nexport const BASE_URL = \"http://api.giphy.com/v1\";\nexport const ENDPOINTS = {\n  search: \"/gifs/search\",\n  trending: \"/gifs/trending\",\n};\n","import Axios from \"axios\";\nimport { BASE_URL, API_KEY, ENDPOINTS } from \"../Constants/apiConstants\";\nimport { makeQueryString } from \"../utils\";\nimport {\n  GIF_LIST_LOADING,\n  GIF_LIST_RESPONSE,\n  CLEAR_GIF_LIST,\n} from \"../Constants/actionTypes\";\n\nexport const getGifList = (endpointKey, params) => {\n  const paramsWithKey = {\n    ...params,\n    api_key: API_KEY,\n  };\n  const request = Axios.get(\n    `${BASE_URL}${ENDPOINTS[endpointKey]}?${makeQueryString(paramsWithKey)}`\n  );\n  return (dispatch) => {\n    dispatch({ type: GIF_LIST_LOADING });\n    request.then(({ data }) => {\n      dispatch({ type: GIF_LIST_RESPONSE, payload: data });\n    });\n  };\n};\n\nexport const clearGifList = () => (dispatch) =>\n  dispatch({ type: CLEAR_GIF_LIST });\n","export const GIF_LIST_LOADING = \"GIF_LIST_LOADING\";\nexport const GIF_LIST_RESPONSE = \"GIF_LIST_RESPONSE\";\nexport const GIF_LIST_FAILURE = \"GIF_LIST_FAILURE\";\nexport const CLEAR_GIF_LIST = \"CLEAR_GIF_LIST\";\n","import React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Gallery from \"react-photo-gallery\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Header from \"./Header\";\nimport { useInfiniteScroll } from \"../utils\";\nimport { getGifList } from \"../Actions/gifList_actions\";\nimport { LIST_LIMIT } from \"../Constants/numeric\";\nimport styles from \"../Styles/HomePage.style\";\n// import GalleryImage from \"./GalleryImage\";\n\nconst useStyles = makeStyles(styles);\n\nconst HomePage = () => {\n  const classes = useStyles();\n  const gifList = useSelector((store) => store.gifList);\n  const dispatch = useDispatch();\n  const [pageNum, setPage] = useState(0);\n  const BottomBorderRef = useRef(null);\n  useInfiniteScroll(BottomBorderRef, 0, setPage);\n\n  useEffect(() => {\n    dispatch(\n      getGifList(\"trending\", {\n        limit: LIST_LIMIT,\n        offset: pageNum * LIST_LIMIT,\n      })\n    );\n  }, [dispatch, pageNum]);\n\n  const imageList = useMemo(\n    () =>\n      gifList.list.map((imageData) => ({\n        ...imageData.images.fixed_height,\n        src: imageData.images.fixed_height.url,\n        width: parseInt(imageData.images.fixed_height.width, 10),\n        height: parseInt(imageData.images.fixed_height.height, 10),\n      })),\n    [gifList.list]\n  );\n  return (\n    <>\n      <Header />\n      <Gallery\n        photos={imageList}\n        // renderImage={GalleryImage}\n      />\n      {gifList.loading && <CircularProgress />}\n      <div ref={BottomBorderRef} className={classes.border} />\n    </>\n  );\n};\n\nexport default HomePage;\n","export default {\n  border: { height: 2, width: 1 },\n};\n","export const LIST_LIMIT = 10;\nexport const a = \"\";\n","import {\n  GIF_LIST_LOADING,\n  GIF_LIST_RESPONSE,\n  CLEAR_GIF_LIST,\n} from \"../Constants/actionTypes\";\n\nconst INITIAL_STATE = {\n  loading: false,\n  list: [],\n  pagination: {},\n};\n\nconst gifListReducer = (state = INITIAL_STATE, action) => {\n  const { payload } = action;\n  switch (action.type) {\n    case GIF_LIST_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case GIF_LIST_RESPONSE:\n      return {\n        loading: false,\n        list: [...state.list, ...payload.data],\n        pagination: payload.pagination,\n      };\n    case CLEAR_GIF_LIST:\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default gifListReducer;\n","import { combineReducers } from \"redux\";\nimport gifListReducer from \"./gifList_reducer\";\n\nexport default combineReducers({\n  gifList: gifListReducer,\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./Styles/index.css\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport themeConfig from \"./Styles/themeConfig\";\n// import Routes from \"./routes\";\nimport HomePage from \"./Components/HomePage\";\nimport combinedReducer from \"./Reducers\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  combinedReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\nconst theme = createMuiTheme(themeConfig);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <HomePage />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}